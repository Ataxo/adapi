== Adapi

Adapi (shortened AdWords API) is a library for easy and painless work with
Google Adwords API. Its users shouldn't bother with SOAP and tangle of XML- and
API-specific objects (remember adwords4r gem?), inputs and outputs are plain Ruby
arrays and hashes.

Adapi is built on new Google Adwords API gems: google-ads-common and
google-adwords-api.

== Installation

* Install dependencies:
       bundle install

* Install gem:
       rake install

== Configuration of AdWords Account(s)

This section explains how to connect to specific account and client.

In general, you can set many AdWords account to connect to (similarly as you can
set up several databases in Rails, for example).

=== Authentication workflow

* load configuration from ~/adapi.yml
* load configuration from ~/adwords.yml (default configuration for AdWords gems
  from Google)
* set configuration directly to Adapi::Config (overrides previous settings)
* if no configuration is available, throw an exception when connecting AdWords API

=== Configuration of multiple accounts

Stored in ~/adapi.yml. Supports multiple accounts, which are identifed by
aliases. Example:

      default:
        authentication:
          method: ClientLogin
          email: user@email.com
          password: password
          developer_token: asdas4wdDsaas
          client_customer_id: 123-456-7890
          user_agent: Adapi Test
        service:
          environment: PRODUCTION
      
      my_account:
        authentication:
          method: ClientLogin
          email: another_user@email.com
          password: password
          developer_token: another_asdas4wdDsaas
          client_customer_id: 098-765-4321
          user_agent: Adapi Test
        service:
          environment: SANDBOX

You tell adapi which account to use by setting an alias:

      Adapi::Config.load_settings(:path => '~/')
      # PS: ENV['HOME'] is the default path

      Adapi::Config.set(:my_account)

:default account is, as name implies, used by default - when you run adapi
without setting under which specific account to run.

=== Configuration from google-adwords-api

If you already have google-adwords-api gem configured and using just one
account, the same configuration will also work for adapi: ~/adwords_api.yml

=== Configuration directly in code

Before logging into the Adwords API, you can set global settings through
Adapi::Config:

      Adapi::Config.set( {
        :authentication => {
          :method => 'ClientLogin',
          :developer_token => 'DEVELOPER_TOKEN',
          :auth_token => 'AUTH_TOKEN',
          :user_agent => 'Adapi Examples',
          :email => 'EMAIL',
          :password => 'PASSWORD',
          :client_email => 'client@email.com'
        },
        :service => {
          :environment => 'SANDBOX' # 'PRODUCTION'
        }
      })

      # this will use the custom login data
      Adapi::Campaign.create(campaign_data)

This will override any previous configuration and the account as :default. You
can also enter more accounts, but note that one of them has to be named
:default.

== API

There are two ways of working with API. Both examples show adding an ad to
specific campaign's ad group:

=== Model-centric

       Adapi::Campaign.create(:data => campaign_data)

=== TODO Collection-centric 

       account = Adapi::Account.new(:account_alias)

       campaign = account.campaigns.create(campaign_data)

       account.campaigns[ campaign[:id] ].ad_groups << ad_group_data

== Examples

Many examples of use are available in /examples directory.

== Author

Lukas Stejskal
